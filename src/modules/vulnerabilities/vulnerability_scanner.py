"""
Comprehensive vulnerability scanner module.
"""

import time
from typing import Dict, List, Any, Optional
from urllib.parse import urljoin, urlparse
import re

from src.core.utils import Logger, HTTPClient, normalize_url
from src.modules.vulnerabilities.sql_injection import SQLInjectionScanner

class VulnerabilityScanner:
    """Comprehensive vulnerability scanner."""
    
    def __init__(self):
        self.http_client = HTTPClient()
        self.results = {
            'sql_injection': {},
            'xss': {},
            'csrf': {},
            'lfi': {},
            'open_redirect': {},
            'summary': {
                'total_vulnerabilities': 0,
                'critical': 0,
                'high': 0,
                'medium': 0,
                'low': 0
            }
        }
    
    def scan_target(self, target: str, modules: List[str] = None) -> Dict[str, Any]:
        """Scan target for vulnerabilities."""
        Logger.info(f"Starting vulnerability scan for: {target}")
        
        if not modules:
            modules = ['sql_injection', 'xss', 'csrf', 'lfi', 'open_redirect']
        
        target = normalize_url(target)
        
        # Get forms and parameters from the target
        forms = self.extract_forms(target)
        
        # SQL Injection scanning
        if 'sql_injection' in modules:
            Logger.info("Starting SQL Injection scan...")
            sql_scanner = SQLInjectionScanner()
            self.results['sql_injection'] = sql_scanner.scan_url(target, forms)
        
        # XSS scanning (placeholder)
        if 'xss' in modules:
            Logger.info("XSS scanning not yet implemented")
            self.results['xss'] = {'status': 'not_implemented'}
        
        # CSRF scanning (placeholder)
        if 'csrf' in modules:
            Logger.info("CSRF scanning not yet implemented")
            self.results['csrf'] = {'status': 'not_implemented'}
        
        # LFI scanning (placeholder)
        if 'lfi' in modules:
            Logger.info("LFI scanning not yet implemented")
            self.results['lfi'] = {'status': 'not_implemented'}
        
        # Open Redirect scanning (placeholder)
        if 'open_redirect' in modules:
            Logger.info("Open Redirect scanning not yet implemented")
            self.results['open_redirect'] = {'status': 'not_implemented'}
        
        # Generate summary
        self.generate_summary()
        
        Logger.success(f"Vulnerability scan completed for {target}")
        return self.results
    
    def extract_forms(self, url: str) -> List[Dict]:
        """Extract forms from the target page."""
        forms = []
        
        try:
            response = self.http_client.get(url)
            if not response:
                return forms
            
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(response.text, 'html.parser')
            
            for form in soup.find_all('form'):
                form_data = {
                    'action': form.get('action', url),
                    'method': form.get('method', 'GET').upper(),
                    'inputs': []
                }
                
                # Extract input fields
                for input_tag in form.find_all(['input', 'textarea']):
                    input_data = {
                        'name': input_tag.get('name', ''),
                        'type': input_tag.get('type', 'text'),
                        'value': input_tag.get('value', '')
                    }
                    form_data['inputs'].append(input_data)
                
                forms.append(form_data)
            
            Logger.info(f"Extracted {len(forms)} forms from {url}")
            
        except Exception as e:
            Logger.warning(f"Error extracting forms: {e}")
        
        return forms
    
    def generate_summary(self):
        """Generate vulnerability summary."""
        summary = self.results['summary']
        
        # Count vulnerabilities by type and severity
        for vuln_type, vuln_data in self.results.items():
            if vuln_type == 'summary':
                continue
            
            if isinstance(vuln_data, dict) and 'vulnerabilities' in vuln_data:
                for vuln in vuln_data['vulnerabilities']:
                    summary['total_vulnerabilities'] += 1
                    severity = vuln.get('severity', 'medium')
                    
                    if severity == 'critical':
                        summary['critical'] += 1
                    elif severity == 'high':
                        summary['high'] += 1
                    elif severity == 'medium':
                        summary['medium'] += 1
                    elif severity == 'low':
                        summary['low'] += 1
    
    def save_results(self, filename: str = None):
        """Save vulnerability scan results."""
        if not filename:
            from datetime import datetime
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"vulnerability_scan_{timestamp}.json"
        
        import os
        import json
        
        os.makedirs('results', exist_ok=True)
        filepath = os.path.join('results', filename)
        
        with open(filepath, 'w') as f:
            json.dump(self.results, f, indent=4, default=str)
        
        Logger.success(f"Vulnerability scan results saved to {filepath}")
        return filepath 